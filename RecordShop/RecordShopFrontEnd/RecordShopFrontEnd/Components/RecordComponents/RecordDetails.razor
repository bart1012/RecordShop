@if(albumDTO != null)
{
   @rendermode InteractiveServer

    <div class="card" style="width: 200px">
        <header class="card-header">


            <p @ref="artistParagraph" class="card-header-title" contenteditable=@enableEditing>@albumDTO.Name</p>


        </header>
        <div class="card-content">
            <div class="content">
                <p>@albumDTO.Artists[0]</p>
                <p>@albumDTO.ReleaseYear</p>
                @foreach (var genre in albumDTO.Genres)
                {
                    <p>@genre</p>
                }
                @foreach (var song in albumDTO.Songs)
                {
                    <p>@song.Name</p>
                }
            </div>
        </div>
        <footer class="card-footer">
            <a  href="#" class="card-footer-item">Save</a>
            <a href="#" class="card-footer-item">Edit</a>
            <a href="#" class="card-footer-item">Delete</a>
        </footer>
    </div>

}
else
{
    <p>Record not </p>
}

@code{


    [Parameter]
    public int AlbumID { get; set; } 

    private ElementReference artistParagraph;

    private bool enableEditing;


    public AlbumDTO? albumDTO { get; set; }

    public bool hasLoaded { get; set; }



    protected async override Task OnParametersSetAsync()
    {
        albumDTO = await LoadAlbum(AlbumID);
        hasLoaded = true;
        StateHasChanged();
    }

    public async Task<AlbumDTO> LoadAlbum(int id)
    {
        using (var client = new HttpClient())
        {
            try
            {
                return await client.GetFromJsonAsync<AlbumDTO>(new Uri($"https://localhost:7195/Albums/{id}"));

            }catch( Exception e)
            {
                return null;
            }

            
        }
    }



}